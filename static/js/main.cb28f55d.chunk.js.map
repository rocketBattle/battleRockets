{"version":3,"sources":["Components/LandingPage.js","Components/RocketsInfo.js","Components/YouHitARocket.js","Components/YouMissed.js","Components/UserMessage.js","Components/ErrorMessage.js","Components/Modal.js","Components/GameCells.js","Components/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","className","to","href","rel","target","Component","YouHitARocket","props","getApiData","requestOne","axios","get","all","then","spread","infoOne","setState","rocketArray","catch","errors","console","log","state","allDataArray","missionArray","shipArray","launchArray","this","map","rocket","data","finalRocket","rocket_id","rocketName","rocket_name","description","wikipedia","src","flickr_images","alt","YouMissed","UserMessage","isHitTrue","ErrorMessage","Modal","didWeGetAHitYet","cellArray","cellz","finalCell","find","cell","id","userInput","hasRocket","name","validateGuess","guess","userGuess","isValidGuess","length","firstChar","charAt","letter","charArray2","indexOf","number","isNaN","boardSize","button","React","createRef","current","focus","toggleModal","Fragment","ref","aria-label","onClick","tabIndex","GameCells","prevState","open","generateRocketLocations","newArray","rocketLocation","generateRocketLocationz","numbers","ship","shipData","letterPosition","Math","floor","random","charArray","numberPosition","shipCoordinate","i","shipLength","push","location","charArrayCopy","index","splice","removeDuplicates","cellCheck","includes","handleUserInput","event","value","toUpperCase","callFunction","hasRocketbeenHit","checkHit","e","preventDefault","userHits","totalHits","alert","setLocation","missed","hitClass","newRocketLocations","numRockets","action","onSubmit","tr","td","onChange","type","placeholder","required","GameBoard","coordinates1","cells1","undefined","App","basename","process","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cb28f55d.chunk.js","sourcesContent":["import React, { Component } from 'react'; \nimport { Link } from 'react-router-dom';\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div>\n                <header>\n                    <div className=\"wrapper\">\n                        <h1>Battle Rockets!</h1>\n                        <h3><span className=\"fatText\">Destroy</span> enemy's rockets before they <span className=\"fatText\">boom</span> yours!</h3>\n                    </div>\n                </header>\n                <main>\n                    <div className=\"wrapper\">\n                        <div className=\"battleLink\">\n                            <Link className=\"enterBattle\" to=\"GameBoard\">enter the battle!</Link>\n                        </div>\n                        <h2>How to play</h2>\n                        <ul>\n                            <li>\n                                <p>Rockets are randomly generated for you and your opponent.</p>\n                            </li>\n                            <li>\n                                <p>Your main goal is to <span className=\"fatText\">boom</span> your opponent's rockets by guessing where they are hidden on the board, one square at a time! </p>\n                            </li>\n                            <li>\n                                <p>With every rocket you hit, you get some cool info about SpaceX rockets!</p>\n                            </li>\n                            <li>\n                                <p>The person who <span className=\"fatText\">booms</span> 10 rockets wins!</p>\n                            </li>\n                        </ul>                            \n                    </div>\n                </main>\n                <footer>\n                    <div className=\"wrapper\">\n                        <div className=\"footerContent\">\n                            <div className=\"creators\">\n                                <h4>Built by:</h4>\n                                <div className=\"creatorsLinks\">\n                                    <a href=\"https://alisacodes.dev/\" rel=\"noreferrer\" target=\"_blank\">Alisa Kitkina</a>\n                                    <a href=\"http://marichka.ca/\" rel=\"noreferrer\" target=\"_blank\">Mariya Morosovska</a>\n                                    <a href=\"http://www.mcabrera.ca/\" rel=\"noreferrer\" target=\"_blank\">Miguel Cabrera</a>\n                                    <a href=\"https://lucassilbernagel.com/\" rel=\"noreferrer\" target=\"_blank\">Lucas Silbernagel</a>\n                                </div>\n                            </div>\n                            <div className=\"credits\">\n                                <h4>Rocket data provided by <a href=\"https://docs.spacexdata.com/?version=latest\">SpaceX Rocket API</a></h4>\n                            </div>\n                        </div>\n                    </div>\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default LandingPage;\n\n\n\n\n\n\n\n// const newArray = this.state.cellArray.map((cellz) => {\n//     return (\n//         cellz.map((cell) => {\n//             // from the matched locations with user input, if also matches the cell id, change rockethasbeenhit to true\n//             if (this.state.userInput === cell.id) {\n//                     cell.hasRocketbeenHit = true\n//             }\n//             return cell;\n//         })\n//     )\n// })\n// // updating the previous old state with current set state.\n// this.setState ({\n//     cellArray: newArray\n// })\n// }\n// }) \n// console.log(this.state.userHits)\n// }","import React, { Component } from 'react';\nimport axios from 'axios'; \n\nclass RocketsInfo extends Component {\n    constructor(){\n        super();\n        this.state = {\n            allDataArray: [],\n            rocketArray: [],\n            missionArray: [],\n            shipArray: [],\n            launchArray: []\n        }\n    }\n\n    componentDidMount(){\n        // this.getRockets()\n        this.getApiData()\n    }\n    \n        getApiData = () => {\n        let rockets =`https://api.spacexdata.com/v3/rockets`;\n        let missions = `https://api.spacexdata.com/v3/missions`;\n        let ships = `https://api.spacexdata.com/v3/ships`;\n        let launches = `https://api.spacexdata.com/v3/launches`;\n        const requestOne = axios.get(rockets);\n        const requestTwo = axios.get(missions);\n        const requestThree = axios.get(ships);\n        const requestFour = axios.get(launches);\n    \n        axios.all([requestOne, requestTwo, requestThree, requestFour]).then(axios.spread((...responses) => {\n            const infoOne = responses[0];\n            const infoTwo = responses[1];\n            const infoThree = responses[2];\n            const infoFour = responses[3];\n            console.log(infoOne, infoTwo, infoThree, infoFour, responses)\n            this.setState({\n            allDataArray: responses,\n            rocketArray: [infoOne],\n            missionArray: [infoTwo],\n            shipArray: [infoThree],\n            launchArray: [infoFour]\n        })\n        // console.log(this.state.allDataArray, this.state.rocketArray, this.state.missionArray, this.state.shipArray, this.state.launchArray)\n        })).catch(errors => {\n        console.log(errors, 'it didnt work!')\n        })\n    }\n\n    // componentWillMount(){\n    // newState = [];\n    // for (let key in rocketArray){\n    //     newState.push {\n    //         id: rocketArray.data[key].id;\n    //         name: rocketArray.data[key].rocket_name\n    //     }\n    //     console.log(rocket)\n    // }\n\n    \n\n    render() {\n\n        return(\n            <div>\n                <ul>\n                    {this.state.rocketArray.map((rocket) => {\n                        const result = rocket.data;\n\n                        return(\n\n                        result.map((finalRocket) => {\n                            console.log(finalRocket.rocket_name);\n                            return(\n\n                                <li>\n                                    <h3>{finalRocket.rocket_name}</h3>\n                                    <p>{finalRocket.description}</p>\n                                    <a href={finalRocket.wikipedia}>Find Out More Info</a>\n                                    <div>\n                                        <img src={finalRocket.flickr_images[0]} alt=\"\" />\n                                    </div>\n                                </li>\n                            )\n                        }))\n                    })\n                    }                \n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default RocketsInfo; ","import React, { Component } from 'react'\nimport axios from 'axios'; \n\nclass YouHitARocket extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            allDataArray: [],\n            rocketArray: [],\n            missionArray: [],\n            shipArray: [],\n            launchArray: []\n        }\n    }\n\n    componentDidMount() {\n        // this.getRockets()\n        this.getApiData()\n    }\n\n    getApiData = () => {\n        let rockets = `https://api.spacexdata.com/v3/rockets`;\n        const requestOne = axios.get(rockets);\n\n        axios.all([requestOne]).then(axios.spread((...responses) => {\n            const infoOne = responses[0];\n            this.setState({\n                rocketArray: [infoOne],\n            })\n        })).catch(errors => {\n            console.log(errors, 'it didnt work!')\n        })\n    }\n\n    render() {\n    return (\n        <div>\n            {this.state.rocketArray.map((rocket) => {\n                const result = rocket.data;\n\n                return (\n\n                    result.map((finalRocket) => {\n                        if (finalRocket.rocket_id === this.props.rocketName) {\n                        return (\n\n                            <div>\n                                <h2>You hit a rocket. Good job, I guess.</h2>\n                                <h3>{finalRocket.rocket_name}</h3>\n                                <p>{finalRocket.description}</p>\n                                <a href={finalRocket.wikipedia}>Find Out More Info</a>\n                                <div>\n                                    <img src={finalRocket.flickr_images[0]} alt=\"\" />\n                                </div>\n                            </div>\n                        )}\n                    }))\n            })\n            }   \n            </div>\n        )    \n    }\n}\n\nexport default YouHitARocket;","import React from 'react';\n\nfunction YouMissed(props) {\n    return <h2>You missed the rocket, loser.</h2>;\n}\n\nexport default YouMissed;","import React from \"react\"\nimport YouHitARocket from \"./YouHitARocket\"\nimport YouMissed from \"./YouMissed\"\n\nfunction UserMessage (props) {\n    // console.log(props.isHitTrue)\n    const isHitTrue = props.isHitTrue;\n    if (isHitTrue) { return <YouHitARocket rocketName = {props.rocketName}/>; } return <YouMissed />;\n}\nexport default UserMessage;","import React from 'react';\n\nfunction ErrorMessage(props) {\n    return (\n        <div className=\"\">\n            <h2>Don't be Safi.</h2>;\n            <h3>You better like it, it took forever to fix.</h3>\n        </div>\n    )\n}\n\nexport default ErrorMessage;","import React from \"react\";\nimport UserMessage from \"./UserMessage\"\nimport ErrorMessage from \"./ErrorMessage\"\nexport default class Modal extends React.Component {\n  constructor(props) {\n      super(props);\n      // Create ref to allow “close” button to be focused on when modal opens.\n      this.button = React.createRef();\n      this.state = {\n        isHitTrue: false,\n        rocketName: \"\",\n        charArray2: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n        isValidGuess: true,\n        boardSize: 7\n      }\n  }\n  // Focus on close button when modal opens\n  componentDidMount() {\n      this.button.current.focus();\n      this.didWeGetAHitYet();\n      this.validateGuess();\n  }\n  didWeGetAHitYet = () => {\n    const newArray = this.props.cellArray;\n    newArray.map((cellz) => {\n      const finalCell = cellz.find(cell => {return cell.id === this.props.userInput})\n      finalCell && this.setState ({\n        isHitTrue: finalCell.hasRocket,\n        rocketName: finalCell.name\n      })   \n    }, this)\n  }\n\n  validateGuess = () => {\n    const guess = this.userGuess(this.props.userInput);\n          console.log(this.props.userInput)\n      if (!guess) {\n          this.setState({\n            isValidGuess: false\n          })\n      } else {\n          return true\n    }\n  } \n\n  userGuess = (guess) => {\n    if (guess === null || guess.length !== 2) {\n    } else {\n      let firstChar = guess.charAt(0);\n      let letter = this.state.charArray2.indexOf(firstChar);\n      let number = guess.charAt(1);\n      // if letter or number is not a number, letters are too long/short then alert user for incorrect use. \n      if (isNaN(letter) || isNaN(number) || letter < 0 || letter > this.state.boardSize || number <= 0 || number > this.state.boardSize) {\n      } else {\n          return letter + number;\n      }\n    }\n    return null;\n}\n\n  render() {\n      const { toggleModal } = this.props;\n      // const isHitTrue = props.isHitTrue;\n      if (this.state.isValidGuess) { return (\n        <React.Fragment>\n          <div className=\"modal\">\n              <button ref={this.button} className=\"closeModal\" aria-label=\"close form\" onClick={toggleModal} tabIndex=\"0\">  \n              &times;\n              </button>\n              <UserMessage isHitTrue={this.state.isHitTrue} rocketName = {this.state.rocketName}/>\n          </div>\n              <div className=\"modalOverlay\" onClick={toggleModal}></div>\n        </React.Fragment>    \n      )\n      } return (\n        <>\n          <div className=\"modal\">\n            <button ref={this.button} className=\"closeModal\" aria-label=\"close form\" onClick={toggleModal} tabIndex=\"0\">  \n            &times;\n            </button>\n            <ErrorMessage/>\n          </div>\n          <div className=\"modalOverlay\" onClick={toggleModal}></div>\n        </>\n      )\n\n      // return (\n      //   // Modal contents: close button, form, modal overlay for background\n      //   <React.Fragment>\n      //       <div className=\"modal\">\n      //         <button ref={this.button} className=\"closeModal\" aria-label=\"close form\" onClick={toggleModal} tabIndex=\"0\">  \n      //         &times;\n      //         </button>\n      //         {/* <UserMessage isHitTrue={this.state.isHitTrue} rocketName = {this.state.rocketName}/> */}\n      //       </div>\n      //       <div className=\"modalOverlay\" onClick={toggleModal}></div>\n      //   </React.Fragment>\n      // );\n  }\n}","import React, { Component } from 'react';\nimport Rockets from './Rockets';\nimport Modal from './Modal';\nimport { Link } from 'react-router-dom';\n// import Cell from './Cell'\n\nclass GameCells extends Component {\n    constructor() {\n        super()\n        this.state = {\n            open: false,\n            userInput: '',\n            boardSize: 7,\n            hitClass: '',\n            charArray: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n            // charArray2: ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\n            rocketLocation: [\n                {\n                    id: 'falcon1',\n                    shipLength: 1,\n                    location: []\n                },\n                {\n                    id: 'falcon9',\n                    shipLength: 2,\n                    location: []\n                },\n                {\n                    id: 'falconheavy',\n                    shipLength: 3,\n                    location: []\n                },\n                {\n                    id: 'starship',\n                    shipLength: 4,\n                    location: []\n                },\n            ],\n            cellArray: [\n                [\n                    {\n                        id: 'A1',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'A2',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'A3',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'A4',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'A5',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'A6',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'A7',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                ],\n                [\n                    {\n                        id: 'B1',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'B2',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'B3',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'B4',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'B5',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'B6',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'B7',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                ],\n                [\n                    {\n                        id: 'C1',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'C2',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'C3',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'C4',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'C5',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'C6',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'C7',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                ],\n                [\n                    {\n                        id: 'D1',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'D2',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'D3',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'D4',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'D5',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'D6',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'D7',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                ],\n                [\n                    {\n                        id: 'E1',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'E2',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'E3',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'E4',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'E5',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'E6',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'E7',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                ],\n                [\n                    {\n                        id: 'F1',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'F2',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'F3',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'F4',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'F5',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'F6',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'F7',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                ],\n                [\n                    {\n                        id: 'G1',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'G2',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'G3',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'G4',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'G5',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'G6',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                    {\n                        id: 'G7',\n                        hasRocket: false,\n                        hasRocketbeenHit: false,\n                        missed: false\n                    },\n                ],\n            ],\n            newRocketLocations: [],\n            numRockets: 4,\n            totalHits: 9,\n            userHits: 0\n        }\n    }\n\n    // lifecycle that is called once, starts off the app.\n    componentDidMount() {\n        this.generateRocketLocations();\n    }\n\n    // Function to open/close modal\n\n    toggleModal = () => {\n        this.setState(prevState => ({\n            open: !prevState.open\n        }));\n    };\n\n\n    // userGuess function called when user submits in the input.\n    // userGuess = (guess) => {\n    //     if (guess === null || guess.length !== 2) {\n    //         alert('need a valid guess please');\n    //     } else {\n    //         let firstChar = guess.charAt(0);\n    //         let letter = this.state.charArray2.indexOf(firstChar);\n    //         let number = guess.charAt(1);\n    //         // if letter or number is not a number, letters are too long/short then alert user for incorrect use. \n    //         if (isNaN(letter) || isNaN(number) || letter < 0 || letter > this.state.boardSize || number <= 0 || number > this.state.boardSize) {\n    //             alert(`Not a valid input`)\n    //         } else {\n    //             return letter + number;\n    //         }\n    //     }\n    //     return null;\n    // }\n\n    // New Generate Rocket Location\n    generateRocketLocations = () => {\n        const newArray = this.state.rocketLocation.map((rocket) => {\n            // console.log(rocket)\n            this.generateRocketLocationz = () => {\n\n                const numbers = [1, 2, 3, 4, 5, 6, 7];\n                // function that sets the specific Letter and Number\n                const shipCoordinate = () => {\n                    // random number between 1-7\n                    const letterPosition = Math.floor(Math.random() * this.state.charArray.length );\n                    ///?????????\n                    const numberPosition = Math.floor(Math.random() * 4);\n                    return {\n                        // returns the letter/number[i] of the array\n                        letter: this.state.charArray[letterPosition],\n                        number: numbers[numberPosition]\n                    }\n                }\n\n                const ship = [];\n                const shipData = shipCoordinate();\n                // iterating through rocket shiplength and pushing the data into ship array.\n                for (let i = 0; i < rocket.shipLength; i++) {\n                    ship.push(`${shipData.letter}${shipData.number + i}`)\n                    // setting the state location to as our new data\n                    rocket.location = ship\n                }\n\n                // console.log(letters.from(new Set(letters)));\n\n                const removeDuplicates = () => {\n                    const charArrayCopy = this.state.charArray\n                    // letters.splice(index, 1)\n                    console.log(shipData)\n                    const index = charArrayCopy.indexOf(shipData.letter)\n                    charArrayCopy.splice(index, 1)\n                    this.setState({\n                        charArray: charArrayCopy\n                    })   \n                    // console.log(index)\n                }\n                removeDuplicates()\n                // for (let i = letters.length - 1; i >= 0; i--) {\n                //     if(letters[i] === shipData.letter) {\n                //         letters.splice(shipData.letter, 1)\n                //         console.log(letters, shipData.letter)\n                //     }\n                // }\n\n                const cellCheck = this.state.cellArray.map((cellz)=>{\n                    return(\n                        cellz.map((cell) => {\n                                if(rocket.location.includes(cell.id)) {\n                                    cell.hasRocket = true\n                                    if(rocket.location.length === 1) {\n                                        cell.name = \"falcon1\"\n                                    } else if (rocket.location.length === 2) {\n                                        cell.name = \"falcon9\"\n                                    } else if (rocket.location.length === 3) {\n                                        cell.name = \"falconheavy\"\n                                    } else if (rocket.location.length === 4) {\n                                        cell.name = \"starship\"\n                                    }\n                                }\n                                return cell\n                        })\n                    )\n                })\n                this.setState({\n                    cellArray: cellCheck\n                })\n                // return console.log(letters)\n            }\n            this.generateRocketLocationz()\n            return rocket\n        })\n        this.setState({\n            rocketLocation: newArray\n        })\n\n        // // set the newArray to state\n        // // we are not taking duplicates into account just yet\n        return console.log(newArray)\n    }\n\n\n    // // generate a random letter from the charArray\n    // const randomLetter = this.state.charArray[Math.floor(Math.random() * this.state.charArray.length)];\n    // // generate a random number from 1 to 7\n    // let randomNumber = Math.floor(Math.random() * 7) + 1;\n    // // concatenate the two variable together to make 1 location.\n    // let randomLocation = randomLetter + randomNumber;\n    // rocket.location.push(randomLocation);\n\n    // // If there are matching numbers in the array, change it?!\n    // if (randomLocation.includes(rocket.location[0, 1, 2, 3])) {\n    //     console.log(`oh SHIT`);\n    // }\n\n\n    // Declare classes in CSS to mark what's hit or missed\n    // Hard code which items in the cells array have ships\n    // > First set a ship icon to the board\n    // > If it's hit, icon changes to flames\n    // Toggle those classes\n    // Each cell's state\n    // if the cell with a state of empty has been hit && there is no ship value, state is empty else change the state to 'hit', if not stay empty\n\n    // sets the userInput into state for later use\n    handleUserInput = (event) => {\n        this.setState({\n            userInput: event.target.value.toUpperCase()\n        })\n    }\n\n    // anytime the user hits a rocket cell, change the className according to if statement\n    callFunction = (cell) => {\n        \n        if (cell.hasRocket === true && cell.hasRocketbeenHit === true) {\n            return 'shipHit'\n        } \n        else if (cell.hasRocket === false && cell.hasRocketbeenHit === true) {\n            return 'blankHit'\n        }\n    }\n\n    //compare the input against the string content of the cell. \n    checkHit = (e) => {\n        // prevents webpage from refreshing after submit\n        e.preventDefault();\n\n        this.setState({\n            userInput: \"\"\n        })\n\n        // calling userGuess with userInput as parameter\n        // const guess = this.userGuess(this.state.userInput);\n        // console.log(guess)\n        // if (!guess) {\n        //     return \n        // } else {\n        //     this.toggleModal()\n        // }\n\n        // if userHits matches the total amount of hits for the game, alert user\n        if (this.state.userHits === this.state.totalHits) {\n            alert('gameover!')\n        }\n        // mapping state property to get to next level\n        this.state.rocketLocation.map((setLocation) => {\n            // if userInput matches any of the items in location state property, add to userHit total.\n            console.log(\"is this showing up?\", setLocation)\n            if (setLocation.location.includes(this.state.userInput)) {\n                this.setState({\n                    userHits: this.state.userHits + 1\n                })\n            }\n                console.log(this.state.userHits)\n                // console.log(\"testing testing\");\n                // creating a new array to replace the old state property\n                const newArray = this.state.cellArray.map((cellz) => {\n                    return (\n                        cellz.map((cell) => {\n                            // from the matched locations with user input, if also matches the cell id, change rockethasbeenhit to true\n                            // console.log(\"testing testing\")\n                            if (this.state.userInput === cell.id) {\n                                \n                                cell.hasRocketbeenHit = true\n                                if (!cell.hasRocket) {\n                                    cell.missed = true\n                                }\n                            } \n                            \n                            return cell;\n                        })\n                    )\n                })\n                // updating the previous old state with current set state.\n                this.setState({\n                    cellArray: newArray\n                })\n            \n        })\n        console.log(this.state.userHits)\n    }\n\n    // destructing cellarray to use as a props for modal.js\n    // cellArrayz = { this.state.cellArray }\n\n    render() {\n        // Modal constants\n        const { open } = this.state;\n        const { toggleModal } = this;\n\n        return (\n            <div className=\"board\">\n                {open && <Modal cellArray={this.state.cellArray} \n                    userInput={this.state.userInput}\n                    toggleModal={toggleModal}/>}\n\n                <form action=\"#\" onSubmit={this.checkHit}>\n                    <table>\n                        <tbody>\n                            {this.state.cellArray.map((tr) => {\n                                return (\n                                    <tr>\n                                        {tr.map((td) => {\n                                            return (\n\n                                                <td className={this.callFunction(td)}>{td.id}</td>\n                                            )\n                                        })}\n                                    </tr>\n\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                    <div className=\"input\">\n                        <input\n                            id=\"userInput\"\n                            onChange={this.handleUserInput}\n                            type=\"text\"\n                            placeholder=\"A1\"\n                            required\n                            value={this.state.userInput}\n                        />\n                        <button onClick={toggleModal} id=\"fireButton\">Let's boom some rockets!</button>\n                    </div>\n                </form>\n\n                {/* // if the user hits trhew rocket, have the modal say \"you did it\" + api call */}\n                {/* // if the user eneters the value dpoesnt not have a ship = \"you suck\"\n                // else if the userenters the duplicate \"you alrewady clicked\"\n                if () { */}\n\n            </div>\n        )\n    }\n}\n\nexport default GameCells;\n\n// Whats left that i noticed:\n// error handling\n// results in modal if you hit the item or not,\n// when locations of the rockets have all been hit (maybe unshift() the specific location string out of the location array, then sort of (if location array is empty, then rocket has been destroyed))\n// when a specific rocket has been destroyed, modal with API information is appended.\n// when all the ships have been hit, modal that pops up to say game over! you win! (just using an alert() for now)\n// definitely more, but I cant think of it all at the moment\n// styling, responsiveness... we still need time to do that, oh God. \n\n\n// Consider that we need to make a second player now\n// since were making a second player, we'll need a second board for both players\n// consider having a second board that will show the players where their ships have been hit\n// how to take turns between players? Modal button to route back and forth between players\n// how to show changes in both boards (where the user clicked, where their opponents board shows them it goes hit)\n// R.I.P to us. ","import React, { Component } from 'react'; \nimport RocketsInfo from './RocketsInfo';\nimport GameCells from './GameCells'\n\nclass GameBoard extends Component {\n    constructor() {\n        super(); \n        this.state = {\n            coordinates1: [],\n            cells1: undefined\n        }\n    }\n\n    componentDidMount() {\n        // if (this.state.cells) {\n        //     console.log(`hello`)\n        // } else {\n        //     console.log(`bye`)\n        // }\n    }\n\n    render() {\n        return(\n            <div className=\"wrapper\">\n                <div className=\"boardContainer\">\n                    <h2>Player 1's turn!</h2>\n                    <p>Boom the opponent!</p>\n\n                    <GameCells />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\nimport './App.scss';\nimport LandingPage from './Components/LandingPage';\nimport GameBoard from './Components/GameBoard';\n\nimport { \n    BrowserRouter as Router, \n    Route } from 'react-router-dom';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <Route exact path=\"/\" component={LandingPage} />\n                <Route exact path=\"/GameBoard\" component={GameBoard} />\n            </Router>\n        )\n    }\n}\n\nexport default App;\n\n// PSEUDO CODE\n\n// COMPONENTS:\n// gameBoard component;\n    // rocketInfo component;\n    // modal popup; \n// landingPage component; \n    // stores axios response! (woohoo so cool)\n    // api link: https://docs.spacexdata.com/?version=latest#5fcdb875-914f-4aef-a932-254397cf147a\n// ACTUAL PSEUDO CODE\n// 1. Landing page where the user is introduced to a start button\n    // short instructions \n        // followed by axios call to display rockets info on button press, i.e. START \n            // create a function that draws out a specific rocket (description + wiki url link thing)\n// 2. Then, display a message for player1 to place rockets on the board. After player1 is done, do the same thing for player2. GAME BOARD is made from a div that contains smaller \"cell\" divs.\n    // have two different states for player1 and player2\n    // each rocket has description to it from the axios call \n    // have a button to continue ONLY when the user completes the placing action\n\n    // THE INITIAL PLACEMENT: state is undefined ===> ships are placed ===> state is defined\n        // allow the user to rotate rockets \n        // make rockets kinda draggable (but you don't have to hold your mouse!!! wooow magic)? \n        // ERROR HANDLING: prevent the user from placing rockets TOO close to each other \n            // by toggling classes on the nearby cells ===> queue an alert \"plz need space between ships\"\n\n    // PLAYER1: CHOOSE SHIPS ===> gap page \"it's next person's turn\" ===> PLAYER2: CHOOSE SHIPS ===> gap page \"OKAY, THE BATTLE IS ABOUT TO START. PASS THE DEVICE TO THE PLAYER1!\"\n// 3. Each person's turn has TWO game boards displayed:\n    // first ===> the enemy field\n    // second ===> their own field\n    // onClick add a disabled attribute to \"cell\" ===> display results based on the ship placement \n// 4. Game ends when someone's ships are ALL destroyed ===> queue the message \"PLAYERX WON!\"+\"play again?\"\n    // to determine whether or not a rocket was destroyed:\n        // create a comparison that compares a set length of a rocket to the number of \"hits\" it received\n\n    // to determine whether or not a player missed: \n        // if state is STILL undefined ===> haha they missed ​\n    // to determine who's turn it is now\n        // if \"hit\" === true ===> playerX goes again \n        // if \"hit\" === false ===> haha loser its the other persons turn \n\n    // to determine whether or not a game has been won: \n    // check if a total of \"n\" divs have their states as \"hit\" (defined) === victory condition\n    // loop ===> in the loop \"if else\" statement\n        // statement looks for up to \"n\" divs that have their state as \"hit\" \n        // loop checks if the criteria has been fulfilled​\n\n// RESOURCES:\n// tiktaktoe ===> https://reactjs.org/tutorial/tutorial.html\n// https://github.com/victor-magarlamov/battleships?files=1\n// https://react.rocks/example/Battleships\n\n// STRETCH GOALS \n// create a unique irl \n    // self-identify themselves as player1/player2 ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}